
scalar JSON
scalar Date

# see https://docs.hasura.io/1.0/graphql/manual/queries/query-filters.html

input String_Selector {
  _eq: String
  #_gt: String
  #_gte: String
  #_ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  #_lt: String
  #_lte: String
  #_neq: String
  #_nilike: String
  #_nin: [String!]
  #_nlike: String
  #_nsimilar: String
  #_similar: String
}

input String_Array_Selector {
  _in: [String!]
  _contains: String
  # _contains_all: [String_Selector]
}

input Int_Selector {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  #_is_null: Boolean
  _lt: Int
  _lte: Int
  #_neq: Int
  #_nin: [Int!]
}

input Int_Array_Selector {
  contains: Int_Selector
  # contains_all: [Int_Selector]
}

input Float_Selector {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  #_is_null: Boolean
  _lt: Float
  _lte: Float
  #_neq: Float
  #_nin: [Float!]
}

input Float_Array_Selector {
  contains: Float_Selector
  # contains_all: [Float_Selector]
}

input Boolean_Selector {
  _eq: Boolean
  #_neq: Boolean
}

input Boolean_Array_Selector {
  contains: Boolean_Selector
  # contains_all: [Boolean_Selector]
}

input Date_Selector {
  _eq: Date
  _gt: Date
  _gte: Date
  _in: [Date!]
  #_is_null: Boolean
  _lt: Date
  _lte: Date
  #_neq: Date
  #_nin: [Date!]
}

input Date_Array_Selector {
  contains: Date_Selector
  # contains_all: [Date_Selector]
}

# column ordering options
enum SortOptions {
  asc
  desc
}

input OptionsInput {
  # Whether to enable caching for this query
  enableCache: Boolean
  # For single document queries, return null instead of throwing MissingDocumentError
  allowNull: Boolean
}

type Site {
  title: String
  url: String
  logoUrl: String
  sourceVersion: String
}
type IntlValue {
  locale: String
  value: String
}
input IntlValueInput{
  locale: String
  value: String
}
directive @intl on FIELD_DEFINITION

  input AuthPasswordInput {
    email: String
    password: String
  }
  type AuthResult {
    token: String
    userId: String
  }
  type LogoutResult {
    userId: String
  }

  input SignupInput {
    email: String
    password: String
  }
  type SignupResult {
    userId: String
  }

  input SetPasswordInput {
    newPassword: String
  }

  #type SetPasswordResult # Will auth user again so we reuse AuthResult atm

  input ResetPasswordInput {
    token: String
    newPassword: String
  }
  type ResetPasswordResult {
    userId: String
  }

  input VerifyEmailInput {
    token: String
  }
  type VerifyEmailResult {
    userId: String
  }

  input AuthEmailInput {
    email: String
  }

type EmailResponse {
  from: String
  to: String
  subject: String
  success: JSON
  error: String
}
union Voteable = Post | Comment

# A user object
type User {
  _id: String 
  username: String 
  emails: [JSON] 
  createdAt: Date 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  services: JSON 
  displayName: String 
  email: String 
  emailHash: String 
  avatarUrl: String 
  slug: String 
  groups: [String] 
  pageUrl: String 
  pagePath: String 
  editUrl: String 
  votes(collectionName: String): [Vote] 
  postCount: Float 
  posts(limit: Int = 5): [Post] 
  comments(limit: Int = 5): [Comment] 
  commentCount: Float 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteUserInput{
  filter: UserFilterInput
  id: String
}

input SingleUserInput {
  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: UserSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiUserInput {

  # filtering
  filter: UserFilterInput
  sort: UserSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleUserOutput{
  result: User
}

type  MultiUserOutput{
  results: [User]
  totalCount: Int
}

type UserMutationOutput{
  data: User
}

input CreateUserInput {
  data: CreateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  profile: JSON 
  displayName: String 
  email: String 
  groups: [String] 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UpdateUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertUserInput{
  filter: UserFilterInput
  id: String
  data: UpdateUserDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateUserDataInput {
  username: String 
  isAdmin: Boolean 
  locale: String 
  displayName: String 
  email: String 
  groups: [String] 
  notifications_users: Boolean 
  notifications_posts: Boolean 
  notifications_comments: Boolean 
  notifications_replies: Boolean 
}

input UserFilterInput {
  _and: [UserFilterInput]
  _not: UserFilterInput
  _or: [UserFilterInput]


  _id: String_Selector
  username: String_Selector

  createdAt: Date_Selector
  isAdmin: Boolean_Selector
  locale: String_Selector

  displayName: String_Selector
  email: String_Selector
  emailHash: String_Selector
  avatarUrl: String_Selector
  slug: String_Selector
  groups: String_Array_Selector
  pageUrl: String_Selector
  pagePath: String_Selector
  editUrl: String_Selector

  postCount: Float_Selector


  commentCount: Float_Selector
  notifications_users: Boolean_Selector
  notifications_posts: Boolean_Selector
  notifications_comments: Boolean_Selector
  notifications_replies: Boolean_Selector
}

input UserSortInput {
  _id: SortOptions
  username: SortOptions
  emails: SortOptions
  createdAt: SortOptions
  isAdmin: SortOptions
  locale: SortOptions
  services: SortOptions
  displayName: SortOptions
  email: SortOptions
  emailHash: SortOptions
  avatarUrl: SortOptions
  slug: SortOptions
  groups: SortOptions
  pageUrl: SortOptions
  pagePath: SortOptions
  editUrl: SortOptions
  votes: SortOptions
  postCount: SortOptions
  posts: SortOptions
  comments: SortOptions
  commentCount: SortOptions
  notifications_users: SortOptions
  notifications_posts: SortOptions
  notifications_comments: SortOptions
  notifications_replies: SortOptions
}

input UserSelectorInput {
  _and: [UserSelectorInput]
  _or: [UserSelectorInput]

}

input UserSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Votes
type Vote {
  _id: String 
  documentId: String 
  collectionName: String 
  userId: String 
  voteType: String 
  power: Float 
  votedAt: Date 
  votedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteVoteInput{
  filter: VoteFilterInput
  id: String
}

input SingleVoteInput {
  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: VoteSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiVoteInput {

  # filtering
  filter: VoteFilterInput
  sort: VoteSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleVoteOutput{
  result: Vote
}

type  MultiVoteOutput{
  results: [Vote]
  totalCount: Int
}

type VoteMutationOutput{
  data: Vote
}

input VoteFilterInput {
  _and: [VoteFilterInput]
  _not: VoteFilterInput
  _or: [VoteFilterInput]


  _id: String_Selector
  documentId: String_Selector
  collectionName: String_Selector
  userId: String_Selector
  voteType: String_Selector
  power: Float_Selector
  votedAt: Date_Selector
}

input VoteSortInput {
  _id: SortOptions
  documentId: SortOptions
  collectionName: SortOptions
  userId: SortOptions
  voteType: SortOptions
  power: SortOptions
  votedAt: SortOptions
}

input VoteSelectorInput {
  _and: [VoteSelectorInput]
  _or: [VoteSelectorInput]

}

input VoteSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Posts
type Post {
  _id: String 
  createdAt: Date 
  url: String 
  title: String 
  slug: String 
  body: String 
  htmlBody: String 
  excerpt: String 
  viewCount: Float 
  lastCommentedAt: Date 
  clickCount: Float 
  status: Float 
  postedAt: Date 
  postedAtFormatted: String 
  sticky: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  userId: String 
  user: User 
  categoriesIds: [String] 
  categories: [Category] 
  commentCount: Float 
  commentersIds: [String] 
  commenters: [User] 
  domain: String 
  pagePath: String 
  pageUrl: String 
  linkUrl: String 
  comments(limit: Int = 5): [Comment] 
  emailShareUrl: String 
  twitterShareUrl: String 
  facebookShareUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  lastCommentedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeletePostInput{
  filter: PostFilterInput
  id: String
}

input SinglePostInput {
  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: PostSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiPostInput {

  # filtering
  filter: PostFilterInput
  sort: PostSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SinglePostOutput{
  result: Post
}

type  MultiPostOutput{
  results: [Post]
  totalCount: Int
}

type PostMutationOutput{
  data: Post
}

input CreatePostInput {
  data: CreatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreatePostDataInput {
  url: String 
  title: String 
  body: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  userId: String 
  categoriesIds: [String] 
}

input UpdatePostInput{
  filter: PostFilterInput
  id: String
  data: UpdatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertPostInput{
  filter: PostFilterInput
  id: String
  data: UpdatePostDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdatePostDataInput {
  url: String 
  title: String 
  body: String 
  status: Float 
  postedAt: Date 
  sticky: Boolean 
  categoriesIds: [String] 
}

input PostFilterInput {
  _and: [PostFilterInput]
  _not: PostFilterInput
  _or: [PostFilterInput]
  _byCategory: PostByCategoryFilterInput

  _id: String_Selector
  createdAt: Date_Selector
  url: String_Selector
  title: String_Selector
  slug: String_Selector
  body: String_Selector
  htmlBody: String_Selector
  excerpt: String_Selector
  viewCount: Float_Selector
  lastCommentedAt: Date_Selector
  clickCount: Float_Selector
  status: Float_Selector
  postedAt: Date_Selector
  sticky: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  userId: String_Selector
  categoriesIds: String_Array_Selector
  commentCount: Float_Selector
  commentersIds: String_Array_Selector
  domain: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
  linkUrl: String_Selector

  emailShareUrl: String_Selector
  twitterShareUrl: String_Selector
  facebookShareUrl: String_Selector


  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
}

input PostByCategoryFilterInput{
  slug: String
}

input PostSortInput {
  _id: SortOptions
  createdAt: SortOptions
  url: SortOptions
  title: SortOptions
  slug: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  excerpt: SortOptions
  viewCount: SortOptions
  lastCommentedAt: SortOptions
  clickCount: SortOptions
  status: SortOptions
  postedAt: SortOptions
  sticky: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  userId: SortOptions
  categoriesIds: SortOptions
  commentCount: SortOptions
  commentersIds: SortOptions
  domain: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  linkUrl: SortOptions
  comments: SortOptions
  emailShareUrl: SortOptions
  twitterShareUrl: SortOptions
  facebookShareUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input PostSelectorInput {
  _and: [PostSelectorInput]
  _or: [PostSelectorInput]

}

input PostSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Comments
type Comment {
  _id: String 
  parentCommentId: String 
  parentComment: Comment 
  topLevelCommentId: String 
  topLevelComment: Comment 
  createdAt: Date 
  postedAt: Date 
  body: String 
  htmlBody: String 
  author: String 
  postId: String 
  post: Post 
  userId: String 
  user: User 
  isDeleted: Boolean 
  userIP: String 
  userAgent: String 
  referrer: String 
  pagePath: String 
  pageUrl: String 
  currentUserVotes: [Vote] 
  allVotes: [Vote] 
  voters: [User] 
  baseScore: Float 
  score: Float 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
  postedAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteCommentInput{
  filter: CommentFilterInput
  id: String
}

input SingleCommentInput {
  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CommentSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCommentInput {

  # filtering
  filter: CommentFilterInput
  sort: CommentSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCommentOutput{
  result: Comment
}

type  MultiCommentOutput{
  results: [Comment]
  totalCount: Int
}

type CommentMutationOutput{
  data: Comment
}

input CreateCommentInput {
  data: CreateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateCommentDataInput {
  parentCommentId: String 
  topLevelCommentId: String 
  body: String 
  postId: String 
  userId: String 
}

input UpdateCommentInput{
  filter: CommentFilterInput
  id: String
  data: UpdateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertCommentInput{
  filter: CommentFilterInput
  id: String
  data: UpdateCommentDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateCommentDataInput {
  body: String 
}

input CommentFilterInput {
  _and: [CommentFilterInput]
  _not: CommentFilterInput
  _or: [CommentFilterInput]


  _id: String_Selector
  parentCommentId: String_Selector
  topLevelCommentId: String_Selector
  createdAt: Date_Selector
  postedAt: Date_Selector
  body: String_Selector
  htmlBody: String_Selector
  author: String_Selector
  postId: String_Selector
  userId: String_Selector
  isDeleted: Boolean_Selector
  userIP: String_Selector
  userAgent: String_Selector
  referrer: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector


  voters: String_Array_Selector
  baseScore: Float_Selector
  score: Float_Selector
}

input CommentSortInput {
  _id: SortOptions
  parentCommentId: SortOptions
  topLevelCommentId: SortOptions
  createdAt: SortOptions
  postedAt: SortOptions
  body: SortOptions
  htmlBody: SortOptions
  author: SortOptions
  postId: SortOptions
  userId: SortOptions
  isDeleted: SortOptions
  userIP: SortOptions
  userAgent: SortOptions
  referrer: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
  currentUserVotes: SortOptions
  allVotes: SortOptions
  voters: SortOptions
  baseScore: SortOptions
  score: SortOptions
}

input CommentSelectorInput {
  _and: [CommentSelectorInput]
  _or: [CommentSelectorInput]

}

input CommentSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Sessions
type Session {
  _id: String 
  createdAt: Date 
  title: String 
  slug: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteSessionInput{
  filter: SessionFilterInput
  id: String
}

input SingleSessionInput {
  # filtering
  filter: SessionFilterInput
  sort: SessionSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SessionSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiSessionInput {

  # filtering
  filter: SessionFilterInput
  sort: SessionSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleSessionOutput{
  result: Session
}

type  MultiSessionOutput{
  results: [Session]
  totalCount: Int
}

type SessionMutationOutput{
  data: Session
}

input CreateSessionInput {
  data: CreateSessionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateSessionDataInput {
  title: String 
}

input UpdateSessionInput{
  filter: SessionFilterInput
  id: String
  data: UpdateSessionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertSessionInput{
  filter: SessionFilterInput
  id: String
  data: UpdateSessionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateSessionDataInput {
  title: String 
}

input SessionFilterInput {
  _and: [SessionFilterInput]
  _not: SessionFilterInput
  _or: [SessionFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  title: String_Selector
  slug: String_Selector
}

input SessionSortInput {
  _id: SortOptions
  createdAt: SortOptions
  title: SortOptions
  slug: SortOptions
}

input SessionSelectorInput {
  _and: [SessionSelectorInput]
  _or: [SessionSelectorInput]

}

input SessionSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Programs
type Program {
  _id: String 
  createdAt: Date 
  title: String 
  slug: String 
  structure: JSON 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteProgramInput{
  filter: ProgramFilterInput
  id: String
}

input SingleProgramInput {
  # filtering
  filter: ProgramFilterInput
  sort: ProgramSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: ProgramSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiProgramInput {

  # filtering
  filter: ProgramFilterInput
  sort: ProgramSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleProgramOutput{
  result: Program
}

type  MultiProgramOutput{
  results: [Program]
  totalCount: Int
}

type ProgramMutationOutput{
  data: Program
}

input CreateProgramInput {
  data: CreateProgramDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateProgramDataInput {
  title: String 
  structure: JSON 
}

input UpdateProgramInput{
  filter: ProgramFilterInput
  id: String
  data: UpdateProgramDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertProgramInput{
  filter: ProgramFilterInput
  id: String
  data: UpdateProgramDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateProgramDataInput {
  title: String 
  structure: JSON 
}

input ProgramFilterInput {
  _and: [ProgramFilterInput]
  _not: ProgramFilterInput
  _or: [ProgramFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  title: String_Selector
  slug: String_Selector

}

input ProgramSortInput {
  _id: SortOptions
  createdAt: SortOptions
  title: SortOptions
  slug: SortOptions
  structure: SortOptions
}

input ProgramSelectorInput {
  _and: [ProgramSelectorInput]
  _or: [ProgramSelectorInput]

}

input ProgramSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Sections
type Section {
  _id: String 
  createdAt: Date 
  path: String 
  programId: String 
  program: Program 
  type: String 
  createdAtFormatted(format: String = "YYYY/MM/DD"): String 
}


input DeleteSectionInput{
  filter: SectionFilterInput
  id: String
}

input SingleSectionInput {
  # filtering
  filter: SectionFilterInput
  sort: SectionSortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: SectionSelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiSectionInput {

  # filtering
  filter: SectionFilterInput
  sort: SectionSortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleSectionOutput{
  result: Section
}

type  MultiSectionOutput{
  results: [Section]
  totalCount: Int
}

type SectionMutationOutput{
  data: Section
}

input CreateSectionInput {
  data: CreateSectionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateSectionDataInput {
  path: String 
  programId: String 
  type: String 
}

input UpdateSectionInput{
  filter: SectionFilterInput
  id: String
  data: UpdateSectionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertSectionInput{
  filter: SectionFilterInput
  id: String
  data: UpdateSectionDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateSectionDataInput {
  path: String 
  programId: String 
  type: String 
}

input SectionFilterInput {
  _and: [SectionFilterInput]
  _not: SectionFilterInput
  _or: [SectionFilterInput]


  _id: String_Selector
  createdAt: Date_Selector
  path: String_Selector
  programId: String_Selector
  type: String_Selector
}

input SectionSortInput {
  _id: SortOptions
  createdAt: SortOptions
  path: SortOptions
  programId: SortOptions
  type: SortOptions
}

input SectionSelectorInput {
  _and: [SectionSelectorInput]
  _or: [SectionSelectorInput]

}

input SectionSelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}


# Type for Categories
type Category {
  _id: String 
  name: String 
  slug: String 
  pagePath: String 
  pageUrl: String 
}


input DeleteCategoryInput{
  filter: CategoryFilterInput
  id: String
}

input SingleCategoryInput {
  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  id: String

  # backwards-compatibility
  "Deprecated (use 'filter/id' fields instead)."
  selector: CategorySelectorUniqueInput

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Return null instead of throwing MissingDocumentError
  allowNull: Boolean
  # An identifier to name the query's execution context
  contextName: String
}

input MultiCategoryInput {

  # filtering
  filter: CategoryFilterInput
  sort: CategorySortInput
  search: String
  offset: Int
  limit: Int

  # backwards-compatibility
  # A JSON object that contains the query terms used to fetch data
  "Deprecated (use 'filter/id' fields instead)."
  terms: JSON

  # options (backwards-compatibility)
  # Whether to enable caching for this query
  enableCache: Boolean
  # Whether to calculate totalCount for this query
  enableTotal: Boolean
  # An identifier to name the query's execution context
  contextName: String
  
}

type SingleCategoryOutput{
  result: Category
}

type  MultiCategoryOutput{
  results: [Category]
  totalCount: Int
}

type CategoryMutationOutput{
  data: Category
}

input CreateCategoryInput {
  data: CreateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input CreateCategoryDataInput {
  name: String 
  slug: String 
}

input UpdateCategoryInput{
  filter: CategoryFilterInput
  id: String
  data: UpdateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpsertCategoryInput{
  filter: CategoryFilterInput
  id: String
  data: UpdateCategoryDataInput!
  # An identifier to name the mutation's execution context
  contextName: String
}

input UpdateCategoryDataInput {
  name: String 
  slug: String 
}

input CategoryFilterInput {
  _and: [CategoryFilterInput]
  _not: CategoryFilterInput
  _or: [CategoryFilterInput]


  _id: String_Selector
  name: String_Selector
  slug: String_Selector
  pagePath: String_Selector
  pageUrl: String_Selector
}

input CategorySortInput {
  _id: SortOptions
  name: SortOptions
  slug: SortOptions
  pagePath: SortOptions
  pageUrl: SortOptions
}

input CategorySelectorInput {
  _and: [CategorySelectorInput]
  _or: [CategorySelectorInput]

}

input CategorySelectorUniqueInput {
  _id: String
  documentId: String # OpenCRUD backwards compatibility
  slug: String

}




type Query {
  siteData: Site
  
  currentUser: User
  
  # A single User document fetched by ID or slug
  user(input: SingleUserInput!): SingleUserOutput
  
  # A list of User documents matching a set of query terms
  users(input: MultiUserInput):  MultiUserOutput
  
  # A single Post document fetched by ID or slug
  post(input: SinglePostInput!): SinglePostOutput
  
  # A list of Post documents matching a set of query terms
  posts(input: MultiPostInput):  MultiPostOutput
  
  # A single Comment document fetched by ID or slug
  comment(input: SingleCommentInput!): SingleCommentOutput
  
  # A list of Comment documents matching a set of query terms
  comments(input: MultiCommentInput):  MultiCommentOutput
  
  # A single Session document fetched by ID or slug
  session(input: SingleSessionInput!): SingleSessionOutput
  
  # A list of Session documents matching a set of query terms
  sessions(input: MultiSessionInput):  MultiSessionOutput
  
  # A single Program document fetched by ID or slug
  program(input: SingleProgramInput!): SingleProgramOutput
  
  # A list of Program documents matching a set of query terms
  programs(input: MultiProgramInput):  MultiProgramOutput
  
  # A single Section document fetched by ID or slug
  section(input: SingleSectionInput!): SingleSectionOutput
  
  # A list of Section documents matching a set of query terms
  sections(input: MultiSectionInput):  MultiSectionOutput
  
  # A single Category document fetched by ID or slug
  category(input: SingleCategoryInput!): SingleCategoryOutput
  
  # A list of Category documents matching a set of query terms
  categories(input: MultiCategoryInput):  MultiCategoryOutput
  
}
  

type Mutation {
  authenticateWithPassword(input: AuthPasswordInput): AuthResult

  logout: LogoutResult

  signup(input: SignupInput): SignupResult

  setPassword(input: SetPasswordInput): AuthResult

  sendResetPasswordEmail(input: AuthEmailInput): Boolean

  resetPassword(input: ResetPasswordInput): ResetPasswordResult

  sendVerificationEmail(input: AuthEmailInput): Boolean

  verifyEmail(input: VerifyEmailInput): VerifyEmailResult

  vote(documentId: String, voteType: String, collectionName: String, voteId: String) : Voteable

  testEmail(emailName: String) : EmailResponse

  getEmbedData(url: String) : JSON

  increasePostViewCount(postId: String): Float

  # Mutation for creating new User documents
  createUser(
  input: CreateUserInput,
  "Deprecated (use 'input' field instead)."
  data: CreateUserDataInput
) : UserMutationOutput

  # Mutation for updating a User document
  updateUser(
  input: UpdateUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput 
) : UserMutationOutput

  # Mutation for upserting a User document
  upsertUser(
  input: UpsertUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateUserDataInput
) : UserMutationOutput

  # Mutation for deleting a User document
  deleteUser(
  input: DeleteUserInput,
  "Deprecated (use 'input' field instead)."
  selector: UserSelectorUniqueInput
) : UserMutationOutput

  # Mutation for creating new Post documents
  createPost(
  input: CreatePostInput,
  "Deprecated (use 'input' field instead)."
  data: CreatePostDataInput
) : PostMutationOutput

  # Mutation for updating a Post document
  updatePost(
  input: UpdatePostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePostDataInput 
) : PostMutationOutput

  # Mutation for upserting a Post document
  upsertPost(
  input: UpsertPostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdatePostDataInput
) : PostMutationOutput

  # Mutation for deleting a Post document
  deletePost(
  input: DeletePostInput,
  "Deprecated (use 'input' field instead)."
  selector: PostSelectorUniqueInput
) : PostMutationOutput

  # Mutation for creating new Comment documents
  createComment(
  input: CreateCommentInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCommentDataInput
) : CommentMutationOutput

  # Mutation for updating a Comment document
  updateComment(
  input: UpdateCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCommentDataInput 
) : CommentMutationOutput

  # Mutation for upserting a Comment document
  upsertComment(
  input: UpsertCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCommentDataInput
) : CommentMutationOutput

  # Mutation for deleting a Comment document
  deleteComment(
  input: DeleteCommentInput,
  "Deprecated (use 'input' field instead)."
  selector: CommentSelectorUniqueInput
) : CommentMutationOutput

  # Mutation for creating new Session documents
  createSession(
  input: CreateSessionInput,
  "Deprecated (use 'input' field instead)."
  data: CreateSessionDataInput
) : SessionMutationOutput

  # Mutation for updating a Session document
  updateSession(
  input: UpdateSessionInput,
  "Deprecated (use 'input' field instead)."
  selector: SessionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSessionDataInput 
) : SessionMutationOutput

  # Mutation for upserting a Session document
  upsertSession(
  input: UpsertSessionInput,
  "Deprecated (use 'input' field instead)."
  selector: SessionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSessionDataInput
) : SessionMutationOutput

  # Mutation for deleting a Session document
  deleteSession(
  input: DeleteSessionInput,
  "Deprecated (use 'input' field instead)."
  selector: SessionSelectorUniqueInput
) : SessionMutationOutput

  # Mutation for creating new Program documents
  createProgram(
  input: CreateProgramInput,
  "Deprecated (use 'input' field instead)."
  data: CreateProgramDataInput
) : ProgramMutationOutput

  # Mutation for updating a Program document
  updateProgram(
  input: UpdateProgramInput,
  "Deprecated (use 'input' field instead)."
  selector: ProgramSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateProgramDataInput 
) : ProgramMutationOutput

  # Mutation for upserting a Program document
  upsertProgram(
  input: UpsertProgramInput,
  "Deprecated (use 'input' field instead)."
  selector: ProgramSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateProgramDataInput
) : ProgramMutationOutput

  # Mutation for deleting a Program document
  deleteProgram(
  input: DeleteProgramInput,
  "Deprecated (use 'input' field instead)."
  selector: ProgramSelectorUniqueInput
) : ProgramMutationOutput

  # Mutation for creating new Section documents
  createSection(
  input: CreateSectionInput,
  "Deprecated (use 'input' field instead)."
  data: CreateSectionDataInput
) : SectionMutationOutput

  # Mutation for updating a Section document
  updateSection(
  input: UpdateSectionInput,
  "Deprecated (use 'input' field instead)."
  selector: SectionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSectionDataInput 
) : SectionMutationOutput

  # Mutation for upserting a Section document
  upsertSection(
  input: UpsertSectionInput,
  "Deprecated (use 'input' field instead)."
  selector: SectionSelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateSectionDataInput
) : SectionMutationOutput

  # Mutation for deleting a Section document
  deleteSection(
  input: DeleteSectionInput,
  "Deprecated (use 'input' field instead)."
  selector: SectionSelectorUniqueInput
) : SectionMutationOutput

  # Mutation for creating new Category documents
  createCategory(
  input: CreateCategoryInput,
  "Deprecated (use 'input' field instead)."
  data: CreateCategoryDataInput
) : CategoryMutationOutput

  # Mutation for updating a Category document
  updateCategory(
  input: UpdateCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCategoryDataInput 
) : CategoryMutationOutput

  # Mutation for upserting a Category document
  upsertCategory(
  input: UpsertCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput,
  "Deprecated (use 'input' field instead)."
  data: UpdateCategoryDataInput
) : CategoryMutationOutput

  # Mutation for deleting a Category document
  deleteCategory(
  input: DeleteCategoryInput,
  "Deprecated (use 'input' field instead)."
  selector: CategorySelectorUniqueInput
) : CategoryMutationOutput

}


